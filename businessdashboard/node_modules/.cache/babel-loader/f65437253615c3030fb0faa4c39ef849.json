{"ast":null,"code":"var URL = require('url'),\n    namespaces = require('./namespaces');\n\nexports.has = require('lodash.has');\nexports.assign = require('lodash.assign');\nexports.uniq = require('lodash.uniq');\n\nvar _get = require('lodash.get');\n/**\n * lodash.get, but wrapped to provide a default subkey (a/k/a path) of \"#\"\n * and defaultValue of \"null\"\n *\n * var obj = { '#': 'foo', 'bar': 'baz' };\n *\n * get(obj);\n * // => 'foo'\n *\n * get(obj, 'bar');\n * // => 'baz'\n *\n * @param {Object} obj\n * @param {String} [subkey=\"#\"] By default, use the '#' key, but you may pass any key you like\n * @return Returns the value of the selected key or 'null' if undefined.\n * @private\n */\n\n\nfunction get(obj, subkey, defaultValue) {\n  if (!subkey) {\n    subkey = '#';\n  }\n\n  if (!defaultValue) {\n    defaultValue = null;\n  }\n\n  if (Array.isArray(obj)) {\n    return _get(obj[0], subkey, defaultValue);\n  } else {\n    return _get(obj, subkey, defaultValue);\n  }\n}\n\nexports.get = get;\n/**\n * Safely trim a value if it's a String\n * @private\n */\n\nfunction safeTrim(val) {\n  if (typeof val === 'string') {\n    return val.trim();\n  }\n\n  return val;\n}\n\nexports.safeTrim = safeTrim;\n/*\n * Expose require('url').resolve, safely returning if either parameter\n * isn't provided\n * @private\n */\n\nfunction resolve(baseUrl, pathUrl) {\n  if (!baseUrl || !pathUrl) return pathUrl;\n  return URL.resolve(baseUrl, pathUrl);\n}\n\nexports.resolve = resolve;\n/*\n * Check whether a given uri is an absolute URL\n * @param {String} uri\n * @private\n */\n\nfunction isAbsoluteUrl(uri) {\n  if (!uri || typeof uri !== 'string') return false;\n  var parts = URL.parse(uri);\n  return Boolean(parts.host);\n}\n\nexports.isAbsoluteUrl = isAbsoluteUrl;\n/*\n * Check whether a given namespace URI matches the given default\n *\n * @param {String} URI\n * @param {String} default, e.g., 'atom'\n * @return {Boolean}\n * @private\n */\n\nfunction nslookup(uri, def) {\n  return namespaces[uri] === def;\n}\n\nexports.nslookup = nslookup;\n/*\n * Return the \"default\" namespace prefix for a given namespace URI\n *\n * @param {String} URI\n * @return {String}\n * @private\n */\n\nfunction nsprefix(uri) {\n  return namespaces[uri];\n}\n\nexports.nsprefix = nsprefix;\n/*\n * Walk a node and re-resolve the urls using the given baseurl\n *\n * @param {Object} node\n * @param {String} baseurl\n * @return {Object} modified node\n * @private\n */\n\nfunction reresolve(node, baseurl) {\n  if (!node || !baseurl) {\n    return false; // Nothing to do.\n  }\n\n  function resolveLevel(level) {\n    var els = Object.keys(level);\n    els.forEach(function (el) {\n      if (Array.isArray(level[el])) {\n        // The shape of the array of element items is different than if the element is not an array.\n        // We need it to be the same shape to enable using the same function for recursion.\n        var levelFromArray = {};\n        level[el].forEach(function (attrs) {\n          levelFromArray[el] = attrs;\n          resolveLevel(levelFromArray);\n        });\n      } else {\n        if (level[el].constructor.name === 'Object') {\n          if (el == 'logo' || el == 'icon' || el == 'link') {\n            if ('#' in level[el]) {\n              level[el]['#'] = URL.resolve(baseurl, level[el]['#']);\n            }\n          } else if (el == 'image') {\n            if ('url' in level[el] && level[el]['url'].constructor.name === 'Object' && '#' in level[el]['url']) {\n              level[el]['url']['#'] = URL.resolve(baseurl, level[el]['url']['#']);\n            }\n\n            if ('link' in level[el] && level[el]['link'].constructor.name === 'Object' && '#' in level[el]['link']) {\n              level[el]['link']['#'] = URL.resolve(baseurl, level[el]['link']['#']);\n            }\n          }\n\n          if ('@' in level[el]) {\n            var attrs = Object.keys(level[el]['@']);\n            attrs.forEach(function (name) {\n              if (name == 'href' || name == 'src' || name == 'uri') {\n                if ('string' === typeof level[el]['@'][name]) {\n                  level[el]['@'][name] = URL.resolve(baseurl, level[el]['@'][name]);\n                }\n              }\n            });\n          }\n        }\n      }\n    });\n    return level;\n  }\n\n  return resolveLevel(node);\n}\n\nexports.reresolve = reresolve;\n/*\n * Aggressivly strip HTML tags\n * Pulled out of node-resanitize because it was all that was being used\n * and it's way lighter...\n *\n * @param {String} str\n * @private\n */\n\nfunction stripHtml(str) {\n  return str.replace(/<.*?>/g, '');\n}\n\nexports.stripHtml = stripHtml;","map":{"version":3,"sources":["/home/jlavan1/classProject/BusinessDashboard-/businessdashboard/node_modules/feedparser/lib/utils.js"],"names":["URL","require","namespaces","exports","has","assign","uniq","_get","get","obj","subkey","defaultValue","Array","isArray","safeTrim","val","trim","resolve","baseUrl","pathUrl","isAbsoluteUrl","uri","parts","parse","Boolean","host","nslookup","def","nsprefix","reresolve","node","baseurl","resolveLevel","level","els","Object","keys","forEach","el","levelFromArray","attrs","constructor","name","stripHtml","str","replace"],"mappings":"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","sourcesContent":["var URL = require('url')\n  , namespaces = require('./namespaces')\n  ;\n\nexports.has = require('lodash.has');\nexports.assign = require('lodash.assign');\nexports.uniq = require('lodash.uniq');\n\nvar _get = require('lodash.get');\n/**\n * lodash.get, but wrapped to provide a default subkey (a/k/a path) of \"#\"\n * and defaultValue of \"null\"\n *\n * var obj = { '#': 'foo', 'bar': 'baz' };\n *\n * get(obj);\n * // => 'foo'\n *\n * get(obj, 'bar');\n * // => 'baz'\n *\n * @param {Object} obj\n * @param {String} [subkey=\"#\"] By default, use the '#' key, but you may pass any key you like\n * @return Returns the value of the selected key or 'null' if undefined.\n * @private\n */\nfunction get(obj, subkey, defaultValue) {\n  if (!subkey) {\n    subkey = '#';\n  }\n\n  if (!defaultValue) {\n    defaultValue = null;\n  }\n\n  if (Array.isArray(obj)) {\n    return _get(obj[0], subkey, defaultValue);\n  }\n  else {\n    return _get(obj, subkey, defaultValue);\n  }\n}\nexports.get = get;\n\n/**\n * Safely trim a value if it's a String\n * @private\n */\nfunction safeTrim (val) {\n  if (typeof val === 'string') {\n    return val.trim();\n  }\n  return val;\n}\nexports.safeTrim = safeTrim;\n\n/*\n * Expose require('url').resolve, safely returning if either parameter\n * isn't provided\n * @private\n */\nfunction resolve (baseUrl, pathUrl) {\n  if (!baseUrl || !pathUrl) return pathUrl;\n  return URL.resolve(baseUrl, pathUrl);\n}\nexports.resolve = resolve;\n\n/*\n * Check whether a given uri is an absolute URL\n * @param {String} uri\n * @private\n */\nfunction isAbsoluteUrl (uri) {\n  if (!uri || typeof uri !== 'string') return false;\n  var parts = URL.parse(uri);\n  return Boolean(parts.host);\n}\nexports.isAbsoluteUrl = isAbsoluteUrl;\n\n/*\n * Check whether a given namespace URI matches the given default\n *\n * @param {String} URI\n * @param {String} default, e.g., 'atom'\n * @return {Boolean}\n * @private\n */\nfunction nslookup (uri, def) {\n  return namespaces[uri] === def;\n}\nexports.nslookup = nslookup;\n\n/*\n * Return the \"default\" namespace prefix for a given namespace URI\n *\n * @param {String} URI\n * @return {String}\n * @private\n */\nfunction nsprefix (uri) {\n  return namespaces[uri];\n}\nexports.nsprefix = nsprefix;\n\n/*\n * Walk a node and re-resolve the urls using the given baseurl\n *\n * @param {Object} node\n * @param {String} baseurl\n * @return {Object} modified node\n * @private\n */\nfunction reresolve (node, baseurl) {\n  if (!node || !baseurl) {\n    return false; // Nothing to do.\n  }\n\n  function resolveLevel (level) {\n    var els = Object.keys(level);\n    els.forEach(function(el){\n      if (Array.isArray(level[el])) {\n        // The shape of the array of element items is different than if the element is not an array.\n        // We need it to be the same shape to enable using the same function for recursion.\n        var levelFromArray = {};\n        level[el].forEach(function (attrs) {\n          levelFromArray[el] = attrs;\n          resolveLevel(levelFromArray);\n        });\n      } else {\n        if (level[el].constructor.name === 'Object') {\n          if (el == 'logo' || el == 'icon' || el == 'link') {\n            if ('#' in level[el]) {\n              level[el]['#'] = URL.resolve(baseurl, level[el]['#']);\n            }\n          } else if (el == 'image') {\n            if ('url' in level[el] && level[el]['url'].constructor.name === 'Object' && '#' in level[el]['url']) {\n              level[el]['url']['#'] = URL.resolve(baseurl, level[el]['url']['#']);\n            }\n            if ('link' in level[el] && level[el]['link'].constructor.name === 'Object' && '#' in level[el]['link']) {\n              level[el]['link']['#'] = URL.resolve(baseurl, level[el]['link']['#']);\n            }\n          }\n          if ('@' in level[el]) {\n            var attrs = Object.keys(level[el]['@']);\n            attrs.forEach(function (name) {\n              if (name == 'href' || name == 'src' || name == 'uri') {\n                if ('string' === typeof level[el]['@'][name]) {\n                  level[el]['@'][name] = URL.resolve(baseurl, level[el]['@'][name]);\n                }\n              }\n            });\n          }\n        }\n      }\n    });\n    return level;\n  }\n\n  return resolveLevel(node);\n}\nexports.reresolve = reresolve;\n\n/*\n * Aggressivly strip HTML tags\n * Pulled out of node-resanitize because it was all that was being used\n * and it's way lighter...\n *\n * @param {String} str\n * @private\n */\nfunction stripHtml (str) {\n  return str.replace(/<.*?>/g, '');\n}\n\nexports.stripHtml = stripHtml;\n"]},"metadata":{},"sourceType":"script"}